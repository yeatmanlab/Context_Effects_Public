df.KR <- get_ddf_Lb(final_lapse, fixef(final_PC1))
coefs$p.KR <- 2*(1-pt(abs(coefs$t.value), df.KR))
colnames(coefs) <- c("$\\beta$", "SE","$t$","$p$")
row.names(coefs) <- c("(Intercept)","Reading skill", "Age")
coefs$`$p$` <- pvalr(coefs$`$p$`)
coefs[,1:3] <- round(coefs[,1:3],3)
final_PC1_sum <- coefs
# Calculate Bayes Factor
h0 <- lmer(PC1 ~ read + type + (1|subject_id),
data = psychometrics)
h1 <- lmer(PC1 ~ read*type + (1|subject_id),
data = psychometrics)
BF = exp( (BIC(h1) - BIC(h0) )/2)
print(BF)
###### Print all the tables
options(knitr.table.format = "latex")
kable(final_slope_sum[-3], booktabs = TRUE, linesep = "", escape = FALSE)
kable(final_lapse_sum[-3], booktabs = TRUE, linesep = "", escape = FALSE)
kable(final_PC1_sum[-3], booktabs = TRUE, linesep = "", escape = FALSE)
kable(final_thresh_sum[-3], booktabs = TRUE, linesep = "", escape = FALSE)
final_thresh
summary(final_thresh)
coefs <- data.frame(coef(summary(final_thresh)))
df.KR <- get_ddf_Lb(final_thresh, fixef(final_thresh))
coefs$p.KR <- 2*(1-pt(abs(coefs$t.value), df.KR))
colnames(coefs) <- c("$\\beta$", "SE","$t$","$p$")
row.names(coefs) <- c("(Intercept)","Condition")
coefs
### ## ## ## ## ## ## ##
##  THRESHOLD MODEL ##
## ## ## ## ## ## ## ##
full_model <- lmer(threshold ~ read*type + wasi_mr_ts + age_at_testing + adhd_dx + (1|subject_id),
data=psychometrics)
# p-values for full model
coefs <- data.frame(coef(summary(full_model)))
df.KR <- get_ddf_Lb(full_model, fixef(full_model))
coefs$p.KR <- 2*(1-pt(abs(coefs$t.value), df.KR))
print(coefs)
# Remove nuisance vars?
no_adhd_dx <- lmer(threshold ~ read*type + wasi_mr_ts + age_at_testing + (1|subject_id),
data=psychometrics)
anova(full_model, no_adhd_dx) # OK to remove adhd
no_wasi <- lmer(threshold ~ read*type + age_at_testing +(1|subject_id),
data = psychometrics)
anova(no_adhd_dx, no_wasi) # OK to remove wasi
no_age <- lmer(threshold ~ read*type + (1|subject_id),
data = psychometrics)
anova(no_wasi, no_age) # OK to remove age
coefs <- data.frame(coef(summary(no_age)))
df.KR <- get_ddf_Lb(no_age, fixef(no_age))
coefs$p.KR <- 2*(1-pt(abs(coefs$t.value), df.KR))
print(coefs)
coefs
### ## ## ## ## ## ## ##
##  THRESHOLD MODEL ##
## ## ## ## ## ## ## ##
full_model <- lmer(threshold ~ read*type + wasi_mr_ts + age_at_testing + adhd_dx + (1|subject_id),
data=psychometrics)
# p-values for full model
coefs <- data.frame(coef(summary(full_model)))
df.KR <- get_ddf_Lb(full_model, fixef(full_model))
coefs$p.KR <- 2*(1-pt(abs(coefs$t.value), df.KR))
print(coefs)
# Remove nuisance vars?
no_adhd_dx <- lmer(threshold ~ read*type + wasi_mr_ts + age_at_testing + (1|subject_id),
data=psychometrics)
anova(full_model, no_adhd_dx) # OK to remove adhd
no_wasi <- lmer(threshold ~ read*type + age_at_testing +(1|subject_id),
data = psychometrics)
anova(no_adhd_dx, no_wasi) # OK to remove wasi
no_age <- lmer(threshold ~ read*type + (1|subject_id),
data = psychometrics)
anova(no_wasi, no_age) # OK to remove age
coefs <- data.frame(coef(summary(no_age)))
df.KR <- get_ddf_Lb(no_age, fixef(no_age))
coefs$p.KR <- 2*(1-pt(abs(coefs$t.value), df.KR))
print(coefs)
no_type <- lmer(threshold ~ read + (1|subject_id),
data = psychometrics)
anova(no_age, no_type) # NOT OK to remove type
no_read <- lmer(threshold ~ type + (1|subject_id),
data = psychometrics)
anova(no_age, no_read) # OK to remove reading
final_thresh <- no_read
coefs <- data.frame(coef(summary(final_thresh)))
df.KR <- get_ddf_Lb(final_thresh, fixef(final_thresh))
coefs$p.KR <- 2*(1-pt(abs(coefs$t.value), df.KR))
colnames(coefs) <- c("$\\beta$", "SE","$t$","$p$")
row.names(coefs) <- c("(Intercept)","Condition")
coefs$`$p$` <- pvalr(coefs$`$p$`)
coefs[,1:3] <- round(coefs[,1:3],3)
final_thresh_sum <- coefs
# Calculate Bayes Factor
h0 <- lmer(threshold ~ read + type + (1|subject_id),
data = psychometrics)
h1 <- lmer(threshold ~ read*type + (1|subject_id),
data = psychometrics)
BF = exp( (BIC(h1) - BIC(h0) )/2)
print(BF)
params <- psychometrics[,4:7]
#################### CATEGORICAL ####################
group_slope <- lmer(slope ~ group*type + (1|subject_id), psychometrics)
df.KR <- get_ddf_Lb(group_slope, fixef(group_slope))
Fval <- anova(group_slope)$F
df1 <- anova(group_slope)$Df
omnibus_sig = 1-pf(Fval, df1, df.KR)
omnibus_sig
#################### CATEGORICAL ####################
psychometrics <- subset(psychometrics, group != "Other")
group_slope <- lmer(slope ~ group*type + (1|subject_id), psychometrics)
df.KR <- get_ddf_Lb(group_slope, fixef(group_slope))
Fval <- anova(group_slope)$F
df1 <- anova(group_slope)$Df
omnibus_sig = 1-pf(Fval, df1, df.KR)
omnibus_sig
df1
df1
df.KR
Fval
summary(group_slope)
Fval
omnibus_sig
group_lapse<- lmer(lapse ~ group*type + (1|subject_id), psychometrics)
df.KR <- get_ddf_Lb(group_lapse, fixef(group_lapse))
Fval <- anova(group_lapse)$F
df1 <- anova(group_lapse)$Df
omnibus_sig = 1-pf(Fval, df1, df.KR)
omnibus_sig
df.KR
Fval
print("F(",df1[1])
paste("F(",df1[1])
paste0("F(",df1[1])
paste0("F(",df1[2],",", df.KR[3] ,"")")
group_PC1 <- lmer(PC1 ~ group*type + (1|subject_id), psychometrics)
df.KR <- get_ddf_Lb(group_PC1, fixef(group_PC1))
Fval <- anova(group_PC1)$F
df1 <- anova(group_PC1)$Df
omnibus_sig = 1-pf(Fval, df1, df.KR)
omnibus_sig
################## COHENS D ################
psy_sum <- psychometrics %>%
group_by(subject_id)%>%
summarise(PC1 = mean(PC1),
slope = mean(slope),
lapse = mean(lapse),
group = unique(group))
psy_sum$group <- factor(psy_sum$group)
cohen.d(psy_sum$PC1, psy_sum$group)
cohen.d(psy_sum$slope, psy_sum$group)
cohen.d(psy_sum$lapse, psy_sum$group)
paste0("F(",df1[2],",", df.KR[3] ,")")
paste0("F(",df1[2],",", df.KR[3] ,")")
df.KR
paste0("F(",df1[2],",", df.KR,")", "=", Fval[3])
paste0("F(",df1[2],",", df.KR,")", "=", Fval[3]), ", p = ", omnibus_sig[3])
paste0("F(",df1[2],",", df.KR,")", "=", Fval[3], ", p = ", omnibus_sig[3])
paste0("F(",df1[2],",", round(df.KR,2),")", "=", Fval[3], ", p = ", omnibus_sig[3])
paste0("F(",df1[2],",", round(df.KR,1),")", "=", Fval[3], ", p = ", omnibus_sig[3])
paste0("F(",df1[2],",", round(df.KR,1),")", "=", round(Fval[3],3), ", p = ", omnibus_sig[3])
paste0("F(",df1[2],",", round(df.KR,1),")", "=", round(Fval[3],3), ", p = ", round(omnibus_sig[3],3))
group_threshold<- lmer(threshold ~ group*type + (1|subject_id), psychometrics)
df.KR <- get_ddf_Lb(group_threshold, fixef(group_threshold))
Fval <- anova(group_threshold)$F
df1 <- anova(group_threshold)$Df
omnibus_sig = 1-pf(Fval, df1, df.KR)
omnibus_sig
paste0("F(",df1[2],",", round(df.KR,1),")", "=", round(Fval[3],3), ", p = ", round(omnibus_sig[3],3))
group_PC1 <- lmer(PC1 ~ group*type + (1|subject_id), psychometrics)
df.KR <- get_ddf_Lb(group_PC1, fixef(group_PC1))
Fval <- anova(group_PC1)$F
df1 <- anova(group_PC1)$Df
omnibus_sig = 1-pf(Fval, df1, df.KR)
paste0("F(",df1[2],",", round(df.KR,1),")", "=", round(Fval[3],3), ", p = ", round(omnibus_sig[3],3))
################## COHENS D ################
psy_sum <- psychometrics %>%
group_by(subject_id)%>%
summarise(PC1 = mean(PC1),
slope = mean(slope),
lapse = mean(lapse),
group = unique(group))
psy_sum$group <- factor(psy_sum$group)
cohen.d(psy_sum$PC1, psy_sum$group)
library(effsize)
cohen.d(psy_sum$PC1, psy_sum$group)
cohen.d(psy_sum$slope, psy_sum$group)
cohen.d(psy_sum$lapse, psy_sum$group)
cohen.d(psy_sum$threshold, psy_sum$group)
################## COHENS D ################
psy_sum <- psychometrics %>%
group_by(subject_id)%>%
summarise(PC1 = mean(PC1),
slope = mean(slope),
lapse = mean(lapse),
group = unique(group),
threshold = unique(threshold))
################## COHENS D ################
psy_sum <- psychometrics %>%
group_by(subject_id)%>%
summarise(PC1 = mean(PC1),
slope = mean(slope),
lapse = mean(lapse),
group = unique(group),
threshold = mean(threshold))
cohen.d(psy_sum$threshold, psy_sum$group)
################## COHENS D ################
psy_sum <- psychometrics %>%
group_by(subject_id)%>%
summarise(PC1 = mean(PC1),
slope = mean(slope),
lapse = mean(lapse),
group = unique(group),
threshold = mean(threshold))
psy_sum$group <- factor(psy_sum$group)
cohen.d(psy_sum$slope, psy_sum$group)
cohen.d(psy_sum$lapse, psy_sum$group)
cohen.d(psy_sum$threshold, psy_sum$group)
cohen.d(psy_sum$PC1, psy_sum$group)
library(ggplot2)
library(dplyr)
library(lme4)
rm(list = ls())
# Load in cleaned data
setwd("/home/eobrien/bde/Projects/Speech_dist/Analysis")
df<- read.csv("../cleaned_data.csv")
# Distance from the mean
df$d_mean = df$step - 4
# Since we break every 35 stimuli, only consider stimulus order WITHIN A BLOCK
df = mutate(df, block = ifelse(trial < 36, 1,
ifelse(trial < 71, 2,
ifelse(trial < 106, 3,
ifelse(trial < 141, 4,
ifelse(trial < 176, 5,
6
))))))
hist(df$block)
df$trial_mod = df$trial %% 35 + 1
df$trial_code <- ifelse(df$type == "Gaussian", paste0("Gaussian_", df$block),
paste0("Uniform_",df$block))
# Define a function for getting the previous step
get_prev_step <- function(df){
df <- df[order(df$trial_mod),]
df$prev_0 <- df$step
df$prev_1 <- c("NA",df$step[1:(length(df$step)-1)] )
df$prev_2 <- c("NA","NA",df$step[1:(length(df$step)-2)] )
df$prev_3 <- c("NA","NA","NA",df$step[1:(length(df$step)-3)] )
df$prev_4 <- c("NA","NA","NA","NA",df$step[1:(length(df$step)-4)] )
return(df)
}
### For every participant, get their
out <- data.frame()
subj_list <- unique(df$subject_id)
for (s in subj_list){
sub <- subset(df, subject_id == s)
blocks <- unique(sub$trial_code)
for (b in blocks){
sub_block <- subset(sub, trial_code == b)
tmp <- get_prev_step(sub_block)
out = rbind(out, tmp)
}
}
glm_df <- out
glm_df$d_0 <- glm_df$d_mean
glm_df$prev_0 <- as.numeric(glm_df$prev_0)
glm_df$prev_1 <- as.numeric(glm_df$prev_1)
glm_df$prev_2 <- as.numeric(glm_df$prev_2)
glm_df$prev_3 <- as.numeric(glm_df$prev_3)
glm_df$prev_4 <- as.numeric(glm_df$prev_4)
glm_df$d_1 <- glm_df$prev_0 - glm_df$prev_1
glm_df$d_2 <- glm_df$prev_0 - glm_df$prev_2
glm_df$d_3 <- glm_df$prev_0 - glm_df$prev_3
glm_df$d_4 <- glm_df$prev_0 - glm_df$prev_4
#
glm_df$read <- scale(glm_df$read)
# If we were to split this up by group....
dys_glm <- glmer(response ~ d_0 + d_1 + d_2 + d_3 + d_4 + (1|subject_id),
data = subset(glm_df, group == "Dyslexic"),
family=binomial(link="probit"),
control = glmerControl(optimizer ="Nelder_Mead"))
ctrl_glm <- glmer(response ~ d_0 + d_1 + d_2 + d_3 + d_4 + (1|subject_id),
data = subset(glm_df, group != "Dyslexic"),
family=binomial(link="probit"),
control = glmerControl(optimizer ="Nelder_Mead"))
dys_sum <- as.data.frame(summary(dys_glm)$coefficients)
dys_sum$group = "Dyslexic"
dys_sum$trial = row.names(dys_sum)
ctrl_sum <- as.data.frame(summary(ctrl_glm)$coefficients)
ctrl_sum$group = "Control"
ctrl_sum$trial = row.names(ctrl_sum)
glm_sum <- rbind(ctrl_sum, dys_sum)
mypalette <- c("firebrick3", "royalblue3")
px <- ggplot(glm_sum, aes(trial, Estimate, colour = group)) +
geom_point()+
geom_line(aes(group = group))+
geom_errorbar(aes(x=trial, ymin=Estimate + `Std. Error`*1.96, ymax=Estimate - `Std. Error`*1.96))+
xlab("")+
ylab("Estimate")+
geom_hline(yintercept = 0)+
scale_colour_manual(values = mypalette, name = "Group")+
scale_x_discrete(labels=c("d_1" = expression(d[1]),
"d_2" = expression(d[2]),
"d_3" = expression(d[3]),
"d_4" = expression(d[4]),
"d_0" = expression(d[0])))+
theme_light()+
theme(text = element_text(size = 16),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank())
px
mypalette <- c("firebrick3", "royalblue3")
px <- ggplot(glm_sum, aes(trial, Estimate, colour = group)) +
geom_point()+
geom_line(aes(group = group))+
geom_errorbar(aes(x=trial, ymin=Estimate + `Std. Error`*1.96, ymax=Estimate - `Std. Error`*1.96))+
xlab("")+
ylab("Estimate")+
geom_hline(yintercept = 0)+
scale_colour_manual(values = mypalette, name = "Group")+
scale_x_discrete(labels=c("d_1" = expression(d[1]),
"d_2" = expression(d[2]),
"d_3" = expression(d[3]),
"d_4" = expression(d[4]),
"d_0" = expression(d[0])))+
theme_light()+
theme(text = element_text(size = 16),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank())
px
ggsave("./Figures/Figure2.pdf", px,
device=cairo_pdf, width=6, height=6)
ggsave("Figures/Figure2.png", px,
width=8, height=8)
# With reading skill as a continuous variable?
big_glm <- glmer(response ~ d_0*read + d_1 + d_2 + (1|subject_id),
data = glm_df,
family=binomial(link="probit"),
control = glmerControl(optimizer ="Nelder_Mead"))
summary(big_glm)
getwd()
library(ggplot2)
library(dplyr)
library(lme4)
rm(list = ls())
# Load in cleaned data
setwd("/home/eobrien/bde/Projects/Speech_dist/Analysis")
df<- read.csv("../cleaned_data.csv")
# Distance from the mean
df$d_mean = df$step - 4
# Since we break every 35 stimuli, only consider stimulus order WITHIN A BLOCK
df = mutate(df, block = ifelse(trial < 36, 1,
ifelse(trial < 71, 2,
ifelse(trial < 106, 3,
ifelse(trial < 141, 4,
ifelse(trial < 176, 5,
6
))))))
hist(df$block)
df$trial_mod = df$trial %% 35 + 1
# Load in cleaned data
setwd("/home/eobrien/bde/Projects/Context_Effects_Public/Analysis")
df<- read.csv("../cleaned_data.csv")
# Distance from the mean
df$d_mean = df$step - 4
# Since we break every 35 stimuli, only consider stimulus order WITHIN A BLOCK
df = mutate(df, block = ifelse(trial < 36, 1,
ifelse(trial < 71, 2,
ifelse(trial < 106, 3,
ifelse(trial < 141, 4,
ifelse(trial < 176, 5,
6
))))))
hist(df$block)
df$trial_mod = df$trial %% 35 + 1
df$trial_code <- ifelse(df$type == "Gaussian", paste0("Gaussian_", df$block),
paste0("Uniform_",df$block))
# Define a function for getting the previous step
get_prev_step <- function(df){
df <- df[order(df$trial_mod),]
df$prev_0 <- df$step
df$prev_1 <- c("NA",df$step[1:(length(df$step)-1)] )
df$prev_2 <- c("NA","NA",df$step[1:(length(df$step)-2)] )
df$prev_3 <- c("NA","NA","NA",df$step[1:(length(df$step)-3)] )
df$prev_4 <- c("NA","NA","NA","NA",df$step[1:(length(df$step)-4)] )
return(df)
}
### For every participant, get their
out <- data.frame()
subj_list <- unique(df$subject_id)
for (s in subj_list){
sub <- subset(df, subject_id == s)
blocks <- unique(sub$trial_code)
for (b in blocks){
sub_block <- subset(sub, trial_code == b)
tmp <- get_prev_step(sub_block)
out = rbind(out, tmp)
}
}
glm_df <- out
glm_df$d_0 <- glm_df$d_mean
glm_df$prev_0 <- as.numeric(glm_df$prev_0)
glm_df$prev_1 <- as.numeric(glm_df$prev_1)
glm_df$prev_2 <- as.numeric(glm_df$prev_2)
glm_df$prev_3 <- as.numeric(glm_df$prev_3)
glm_df$prev_4 <- as.numeric(glm_df$prev_4)
glm_df$d_1 <- glm_df$prev_0 - glm_df$prev_1
glm_df$d_2 <- glm_df$prev_0 - glm_df$prev_2
glm_df$d_3 <- glm_df$prev_0 - glm_df$prev_3
glm_df$d_4 <- glm_df$prev_0 - glm_df$prev_4
#
glm_df$read <- scale(glm_df$read)
# If we were to split this up by group....
dys_glm <- glmer(response ~ d_0 + d_1 + d_2 + d_3 + d_4 + (1|subject_id),
data = subset(glm_df, group == "Dyslexic"),
family=binomial(link="probit"),
control = glmerControl(optimizer ="Nelder_Mead"))
ctrl_glm <- glmer(response ~ d_0 + d_1 + d_2 + d_3 + d_4 + (1|subject_id),
data = subset(glm_df, group != "Dyslexic"),
family=binomial(link="probit"),
control = glmerControl(optimizer ="Nelder_Mead"))
dys_sum <- as.data.frame(summary(dys_glm)$coefficients)
dys_sum$group = "Dyslexic"
dys_sum$trial = row.names(dys_sum)
ctrl_sum <- as.data.frame(summary(ctrl_glm)$coefficients)
ctrl_sum$group = "Control"
ctrl_sum$trial = row.names(ctrl_sum)
glm_sum <- rbind(ctrl_sum, dys_sum)
mypalette <- c("firebrick3", "royalblue3")
px <- ggplot(glm_sum, aes(trial, Estimate, colour = group)) +
geom_point()+
geom_line(aes(group = group))+
geom_errorbar(aes(x=trial, ymin=Estimate + `Std. Error`*1.96, ymax=Estimate - `Std. Error`*1.96))+
xlab("")+
ylab("Estimate")+
geom_hline(yintercept = 0)+
scale_colour_manual(values = mypalette, name = "Group")+
scale_x_discrete(labels=c("d_1" = expression(d[1]),
"d_2" = expression(d[2]),
"d_3" = expression(d[3]),
"d_4" = expression(d[4]),
"d_0" = expression(d[0])))+
theme_light()+
theme(text = element_text(size = 16),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank())
px
ggsave("recency_fx_group.pdf", px,
device=cairo_pdf, width=6, height=6)
ggsave("recency_fx_group.png", px,
width=8, height=8)
ggsave("Figures/Figure2.pdf", px,
device=cairo_pdf, width=8, height=8)
ggsave("Figures/Figure2.png", px,
width=8, height=8)
# With reading skill as a continuous variable?
big_glm <- glmer(response ~ d_0*read + d_1 + d_2 + (1|subject_id),
data = glm_df,
family=binomial(link="probit"),
control = glmerControl(optimizer ="Nelder_Mead"))
summary(big_glm)
# WHAT IF THERE WAS AN INTERACTION WITH STIMULUS DISTRIBUTION? #
big_glm4 <- glmer(response ~ d_inf*read + d_1 + d_2 + type*read (1|subject_id),
data = glm_df,
family=binomial(link="probit"),
control = glmerControl(optimizer ="Nelder_Mead"))
# WHAT IF THERE WAS AN INTERACTION WITH STIMULUS DISTRIBUTION? #
big_glm4 <- glmer(response ~ d_0*read + d_1 + d_2 + type*read (1|subject_id),
data = glm_df,
family=binomial(link="probit"),
control = glmerControl(optimizer ="Nelder_Mead"))
# With reading skill as a continuous variable?
big_glm <- glmer(response ~ d_0*read + d_1 + d_2 + (1|subject_id),
data = glm_df,
family=binomial(link="probit"),
control = glmerControl(optimizer ="Nelder_Mead"))
summary(big_glm)
pvalr <- function(pvals, sig.limit = .001, digits = 3, html = FALSE) {
roundr <- function(x, digits = 1) {
res <- sprintf(paste0('%.', digits, 'f'), x)
zzz <- paste0('0.', paste(rep('0', digits), collapse = ''))
res[res == paste0('-', zzz)] <- zzz
res
}
sapply(pvals, function(x, sig.limit) {
if (x < sig.limit)
if (html)
return(sprintf('&lt; %s', format(sig.limit))) else
return(sprintf('$<$ %s', format(sig.limit)))
if (x > .1)
return(roundr(x, digits = 2)) else
return(roundr(x, digits = digits))
}, sig.limit = sig.limit)
}
coefs <- data.frame(coef(summary(big_glm)))
colnames(coefs) <- c("$\\beta$", "SE","$z$","$p$")
coefs$`$p$` <- pvalr(coefs$`$p$`)
coefs[,1:3] <- round(coefs[,1:3],3)
options(knitr.table.format = "latex")
kable(coefs[-3], booktabs = TRUE, linesep = "", escape = FALSE)
# WHAT IF THERE WAS AN INTERACTION WITH STIMULUS DISTRIBUTION? #
big_glm4 <- glmer(response ~ d_0*read + d_1 + d_2 + type*read (1|subject_id),
data = glm_df,
family=binomial(link="probit"),
control = glmerControl(optimizer ="Nelder_Mead"))
# WHAT IF THERE WAS AN INTERACTION WITH STIMULUS DISTRIBUTION? #
big_glm4 <- glmer(response ~ d_0*read + d_1 + d_2 + type*read + (1|subject_id),
data = glm_df,
family=binomial(link="probit"),
control = glmerControl(optimizer ="Nelder_Mead"))
summary(big_glm4)
